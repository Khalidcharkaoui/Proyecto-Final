{"version":3,"sources":["Context/ChatProvider.js","Components/Authentication/Login.js","Components/Authentication/Signup.js","Pages/Chatup.png","Pages/Homepage.js","Components/SingleChat.js","Config/ChatLogics.js","Components/Diverseparts/ProfileModal.js","Components/ScrollableChat.js","Components/MychatsBC.jpg","Components/Users/UserBadgeItem.js","Components/Users/UserListItem.js","Components/Diverseparts/UpdateGroupChatModal.js","Components/Chatbox.js","Components/ChatLoading.js","Components/Diverseparts/GroupChatModal.js","Components/MyChats.js","Components/Diverseparts/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","_placeholder","color","size","width","h","onClick","boxSize","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","src","chatupLogo","alt","objectFit","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","fontSize","fontFamily","fontWeight","borderColor","flexDir","alignItems","md","ScrollableChat","deletedMessages","setDeletedMessages","handleDeleteMessage","Authorization","token","put","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","includes","deleted","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","get","handleRename","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","_focus","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","isGroupChat","toUpperCase","bgImage","MychatsBC","bgSize","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","notif","n","as","Button","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e38b8560.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    \n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder= \"Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          _placeholder={{ color: 'white' }}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Your Password\"\n            _placeholder={{ color: 'white' }}\n          />\n          <InputRightElement width=\"3rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n            {show ? <ViewOffIcon boxSize={5} /> : <ViewIcon boxSize={5} />}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"teal\" //Azul turquesa\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Log in\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"purple\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@gmail.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        log in like a Guest \n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"ChatUp\");\n      data.append(\"cloud_name\", \"ddoicboul\");\n      fetch(\"https://api.cloudinary.com/v1_1/ddoicboul/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Your Name\"\n          onChange={(e) => setName(e.target.value)}\n          _placeholder={{ color: 'white' }}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          _placeholder={{ color: 'white' }}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Your Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            _placeholder={{ color: 'white' }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n            {show ? <ViewOffIcon boxSize={5} /> : <ViewIcon boxSize={5} />}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm your Password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n            _placeholder={{ color: 'white' }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n            {show ? <ViewOffIcon boxSize={5} /> : <ViewIcon boxSize={5} />}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"teal\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","export default __webpack_public_path__ + \"static/media/Chatup.6c293ee3.png\";","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Image,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../Components/Authentication/Login\";\nimport Signup from \"../Components/Authentication/Signup\";\nimport chatupLogo from \"./Chatup.png\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n          d=\"flex\"\n          justifyContent=\"center\"\n          p={3}\n          bg=\"gray\"\n          w=\"100%\"\n          h=\"20%\"\n          m=\"40px 0 15px 0\"\n          borderRadius=\"lg\"\n          borderWidth=\"1px\"\n          position=\"relative\"\n      >\n\n<Image src= {chatupLogo} alt=\"Logo\" w=\"100%\" \n    h=\"100%\" \n    objectFit=\"cover\" // Utiliza \"cover\" para que la imagen se ajuste y cubra completamente el espacio\n    position=\"absolute\"/> \n   \n\n        </Box>\n\n      <Box bg=\"gray\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\" m=\"0px 0 15px 0\">\n        <Tabs isFitted variant=\"soft-rounded\" colorScheme=\"teal\">\n          <TabList mb=\"1em\">\n            <Tab style={{ color: \"black\"}}>Login</Tab>\n            <Tab style={{ color: \"black\"}}>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../Config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./Diverseparts/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../Animations/typing.json\";\nimport MychatsBC from './MychatsBC.jpg';\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./Diverseparts/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; \nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"cursive\"\n            fontWeight=\"bold\" \n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text >\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bgImage={`url(${MychatsBC})`}\n            bgSize=\"cover\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg = \"gray\"\n                color=\"white\"\n                placeholder=\"Enter a message..\"\n                _placeholder={{ color: 'white' }}\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // Para tener socket.io en alguna pagina\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"cursive\">\n            Chose and click on a user to start chatting, \n            and stay connected\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay/>\n        <ModalContent h=\"410px\" bg=\"gray\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"cursive\"\n            fontWeight=\"bold\" \n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton borderColor=\"teal\" />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"cursive\"\n              fontWeight=\"bold\" \n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} bg=\"teal\">Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { DeleteIcon } from \"@chakra-ui/icons\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { Text } from \"@chakra-ui/layout\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../Config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n  const toast = useToast();\n  const [deletedMessages, setDeletedMessages] = useState([]);\n\n  const handleDeleteMessage = async (message) => {\n    try {\n      if (!message) {\n        return;\n      }\n   \n      // Verificar si el mensaje fue enviado por el usuario actual\n      if (message.sender._id === user._id) {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n         await axios.put(\n          `/api/message/mark-as-deleted/${message._id}`,\n          null,\n          config\n        );\n\n        // Actualizar el estado o realizar cualquier otra acción necesaria\n        setDeletedMessages([...deletedMessages, message._id]);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"No puedes borrar mensajes de otros usuarios.\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {isSameSender(messages, m, i, user._id) || isLastMessage(messages, i, user._id) ? (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\" \n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            ) : null}\n         <span\n              style={{\n                backgroundColor: m.sender._id === user._id ? \"#4DB6AC\" : \"#A657A6\",\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n              >\n              <Text fontSize=\"xs\" color =\"blackAlpha.900\"> {m.sender.name}: </Text>\n              {deletedMessages.includes(m._id) ? \"Este mensaje ha sido eliminado\"  : m.deleted ? \"Este mensaje ha sido eliminado\" : m.content}\n              {!m.deleted && m.sender._id === user._id && (\n  <DeleteIcon\n    boxSize={4}\n    color=\"red.500\" \n    cursor=\"pointer\"\n    onClick={() => handleDeleteMessage(m)}\n  />\n)}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;","export default __webpack_public_path__ + \"static/media/MychatsBC.68d18a87.jpg\";","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\n\nconst UserListItem = ({user, handleFunction }) => {\n  \n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../Users/UserBadgeItem\";\nimport UserListItem from \"../Users/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"gray\">\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            fontWeight=\"bold\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                color=\"white\"\n                placeholder=\"Add the new Chat Name\"\n                _placeholder={{ color: 'white' }}\n                _focus={{ borderColor: 'teal' }} \n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                color=\"white\"\n                placeholder=\"Add a new User to the group\"\n                _placeholder={{ color: 'white' }}\n                _focus={{ borderColor: 'teal' }} \n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"gray\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../Users/UserBadgeItem\";\nimport UserListItem from \"../Users/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"gray\">\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton _focus={{ borderColor: 'teal' }} />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n              color=\"white\"\n              placeholder=\"Add Chat Name\"\n              _placeholder={{ color: 'white' }}\n              mb={3}\n              _focus={{ borderColor: 'teal' }} // Cambia el color del borde al enfocar el input\n              onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                color=\"white\"\n                placeholder=\"Add Users eg: Khalid, Kanguro, Guest \"\n                _placeholder={{ color: 'white' }}\n                mb={1}\n                _focus={{ borderColor: 'teal' }} \n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"teal\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./Diverseparts/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport MychatsBC from './MychatsBC.jpg';\n\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bgImage={`url(${MychatsBC})`}\n      bgSize=\"cover\" // Ajusta el tamaño de la imagen de fondo\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n         <Text color=\"White\">My Chats</Text>\n        <GroupChatModal>\n          <Button\n            bg=\"#A657A6\"\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            Create a New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bgImage={`url(${MychatsBC})`}\n        bgSize=\"cover\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../Config/ChatLogics\";\nimport UserListItem from \"../Users/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"gray\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button bg= \"#4DB6AC\" variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search for Users\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"cursive\" fontWeight=\"bold\" bg=\"#A657A6\" borderRadius=\"full\" p={2} >\n          <div>ChatUp</div> \n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"#4DB6AC\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList bg=\"gray\">\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../Components/Chatbox\";\nimport MyChats from \"../Components/MyChats\";\nimport SideDrawer from \"../Components/Diverseparts/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}